AWSTemplateFormatVersion: 2010-09-09
Description: 'Build on AWS Project Cognito Stack.
  Modified https://github.com/rosberglinhares/CloudFormationCognitoCustomResources'
Parameters:
  LogoutURL:
    Type: String  
    Default: http://localhost
  CallbackURL:
    Type: String  
    Default: http://localhost/callback  
  AppDomain:
    Type: String  
    Default: hjghjfgfg555
Resources:
  SNSRole:
    Type: AWS::IAM::Role
    Description: "An IAM Role to allow Cognito to send SNS messages"
    Properties:
      RoleName: !Sub ${AWS::StackName}-cognito-sns-role
      ManagedPolicyArns:
        - Ref: CognitoSNSPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cognito-idp.amazonaws.com
    DependsOn:
      - CognitoSNSPolicy

  CognitoSNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow Amazon Cognito to access SNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:publish
            Resource: "*"

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-photos-pool
      AliasAttributes: 
        - email
        - phone_number
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: Dear {name}, Your verification code is {####}
      EmailVerificationSubject: Email verification
      MfaConfiguration: OPTIONAL
      Policies: 
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema: 
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
      SmsConfiguration:
        ExternalId: !Sub ${AWS::StackName}-external
        SnsCallerArn: !GetAtt SNSRole.Arn
        
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-WebsiteClient
      GenerateSecret: true
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClientClientSettings:
    Type: Custom::CognitoUserPoolClientSettings
    Properties:
      ServiceToken: !GetAtt CloudFormationCognitoUserPoolClientSettings.Arn
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoUserPoolClient
      AppDomain: !Ref AppDomain
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL:  !Ref CallbackURL
      LogoutURL: !Ref LogoutURL
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        
  CognitoIdPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${AWS::StackName}cognitoidpool
      CognitoIdentityProviders: 
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false


  CognitoCustomResourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-cognito_resource_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
        -
          PolicyName: ManageUserPoolDomain
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolClient'
                Resource: '*'
        -
          PolicyName: InvokeLambdaFunction
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*'

  CloudFormationCognitoUserPoolClientSettings:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CloudFormationCognitoUserPoolClientSettings
      Runtime: nodejs8.10
      Code:
        ZipFile: >
          const AWS = require('aws-sdk');
          const response = require('cfn-response');
          const cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();
          exports.handler = (event, context) => {
              try {
                  switch (event.RequestType) {
                      case 'Create':
                      case 'Update':
                          cognitoIdentityServiceProvider.updateUserPoolClient({
                              UserPoolId: event.ResourceProperties.UserPoolId,
                              ClientId: event.ResourceProperties.UserPoolClientId,
                              SupportedIdentityProviders: event.ResourceProperties.SupportedIdentityProviders,
                              CallbackURLs: [event.ResourceProperties.CallbackURL],
                              LogoutURLs: [event.ResourceProperties.LogoutURL],
                              AllowedOAuthFlowsUserPoolClient: (event.ResourceProperties.AllowedOAuthFlowsUserPoolClient == 'true'),
                              AllowedOAuthFlows: event.ResourceProperties.AllowedOAuthFlows,
                              AllowedOAuthScopes: event.ResourceProperties.AllowedOAuthScopes
                          })
                          .promise()
                          .then(data =>{
                              let params = {
                                Domain: event.ResourceProperties.AppDomain,
                                UserPoolId:  event.ResourceProperties.UserPoolId
                              };
                              console.log(params);
                              return cognitoIdentityServiceProvider.createUserPoolDomain(params).promise();
                          })
                          .then(data =>{
                              let params = {
                                ClientId: event.ResourceProperties.UserPoolClientId,
                                UserPoolId:  event.ResourceProperties.UserPoolId
                              };
                              return cognitoIdentityServiceProvider.describeUserPoolClient(params).promise();
                          })
                          .then(data =>{
                            console.log(data);
                            let responseData = {ClientSecret: data.UserPoolClient.ClientSecret};        
                            console.log(responseData);
                            response.send(event, context, response.SUCCESS, responseData);
                          })
                          .catch(err=>{
                            console.error(err);
                            response.send(event, context, response.FAILED,{});
                          });
                          
                          break;
                          
                      case 'Delete':
                          let params = {
                            Domain: event.ResourceProperties.AppDomain,
                            UserPoolId:  event.ResourceProperties.UserPoolId
                          };
                          cognitoIdentityServiceProvider.deleteUserPoolDomain(params).promise()
                          .then(data=>response.send(event, context, response.SUCCESS,{}))
                          .catch(error=>response.send(event, context, response.FAILED,{}));
                          break;
                  }
                  
                  console.info(`CognitoUserPoolClientSettings Success for request type ${event.RequestType}`);
              } catch (error) {
                  console.error(`CognitoUserPoolClientSettings Error for request type ${event.RequestType}:`, error);
                  response.send(event, context, response.FAILED,{});
              }
          }
      Handler: index.handler
      Role: !GetAtt CognitoCustomResourceRole.Arn


Outputs:
  CognitoUserPoolId:
    Description: The Pool ID of the Cognito User Pool
    Value: !Ref CognitoUserPool
  CognitoUserPoolProviderURL:
    Description: The Pool ID of the Cognito User Pool
    Value: !GetAtt CognitoUserPool.ProviderURL
  CognitoUserPoolArn:
    Description: The Pool ID of the Cognito User Pool
    Value: !GetAtt CognitoUserPool.Arn   
  CognitoUserPoolClientId:
    Description: The Client ID 
    Value: !Ref CognitoUserPoolClient
  ClientSecret:
    Description: The Client ID 
    Value: !GetAtt CognitoUserPoolClientClientSettings.ClientSecret
