AWSTemplateFormatVersion: '2010-09-09'
Description: Building on AWS Web Server Stack
Parameters:
  SourceBucket:
    Type: String
  EC2VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
  WebServerInstanceProfile:
    Type: String
  WebServerRole:
    Type: String
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  LoadBalancerArn:
    Type: String
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Resources:
  WebInstance1: 
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication: 
        rolebased: 
          type: "S3"
          buckets: 
            - !Ref SourceBucket
          roleName: !Ref WebServerRole
      AWS::CloudFormation::Init:
        configSets:
          InstallAndDeploy:
            - Install
            - Deploy
        Install:      
          packages:
            yum:
              python36: []
              python36-devel: []
              nginx: []
              gcc: []
          sources: 
              /photos: !Sub "https://s3.amazonaws.com/${SourceBucket}/deploy-app.zip"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebInstance1.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance1 --configsets InstallAndDeploy --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root                

          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            01_unblock_nginx:
              command: chkconfig nginx on
            02_install_xray:
              command: |
                curl https://s3.dualstack.us-east-2.amazonaws.com/aws-xray-assets.us-east-2/xray-daemon/aws-xray-daemon-3.x.rpm -o /tmp/xray.rpm && yum install -y /tmp/xray.rpm
              cwd: "/tmp"
              ignoreErrors: "false" 
        Deploy:
          commands:
            01_pip_uwsgi:
              command: pip-3.6 install uwsgi
              cwd: "/photos"
              ignoreErrors: "false"
            02_pip_flask_app_requirements:
              command: pip-3.6 install -r requirements.txt
              cwd: "/photos/FlaskApp"
              ignoreErrors: "false"     
            03_copy_config:
              command: mv -f nginx.conf /etc/nginx/nginx.conf && mv -f uwsgi.conf /etc/init/uwsgi.conf
              cwd: "/photos/Deploy"
              ignoreErrors: "false"               
            04_create_database:
              command: python3 database_create_tables.py
              cwd: "/photos/Deploy"
              ignoreErrors: "false"          
            05_start_uwsgi:
              command: start uwsgi
            06_restart_nginx:
              command: service nginx restart
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces: 
        -   
          DeviceIndex: 0
          GroupSet: 
            - Ref: WebSecurityGroup
          SubnetId: 
            Ref: PrivateSubnet1
      Tags:
        -
          Key: Name
          Value: WebServer1
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance1 --configsets InstallAndDeploy --region ${AWS::Region}
          # Signal the status from cfn-init (via $?)
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebInstance1 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M        

  WebInstance2: 
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication: 
        rolebased: 
          type: "S3"
          buckets: 
            - !Ref SourceBucket
          roleName: !Ref WebServerRole
      AWS::CloudFormation::Init:
        configSets:
          InstallAndDeploy:
            - Install
            - Deploy
        Install:      
          packages:
            yum:
              python36: []
              python36-devel: []
              nginx: []
              gcc: []
          sources: 
              /photos: !Sub "https://s3.amazonaws.com/${SourceBucket}/deploy-app.zip"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebInstance2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance2 --configsets InstallAndDeploy --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root                

          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            01_unblock_nginx:
              command: chkconfig nginx on
            02_install_xray:
              command: |
                curl https://s3.dualstack.us-east-2.amazonaws.com/aws-xray-assets.us-east-2/xray-daemon/aws-xray-daemon-3.x.rpm -o /tmp/xray.rpm && yum install -y /tmp/xray.rpm
              cwd: "/tmp"
              ignoreErrors: "false" 
        Deploy:
          commands:
            01_pip_uwsgi:
              command: pip-3.6 install uwsgi
              cwd: "/photos"
              ignoreErrors: "false"
            02_pip_flask_app_requirements:
              command: pip-3.6 install -r requirements.txt
              cwd: "/photos/FlaskApp"
              ignoreErrors: "false"     
            03_copy_config:
              command: mv -f nginx.conf /etc/nginx/nginx.conf && mv -f uwsgi.conf /etc/init/uwsgi.conf
              cwd: "/photos/Deploy"
              ignoreErrors: "false"               
            04_create_database:
              command: python3 database_create_tables.py
              cwd: "/photos/Deploy"
              ignoreErrors: "false"          
            05_start_uwsgi:
              command: start uwsgi
            06_restart_nginx:
              command: service nginx restart
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces: 
        -   
          DeviceIndex: 0
          GroupSet: 
            - Ref: WebSecurityGroup
          SubnetId: 
            Ref: PrivateSubnet2
      Tags:
        -
          Key: Name
          Value: WebServer2
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance2 --configsets InstallAndDeploy --region ${AWS::Region}
          # Signal the status from cfn-init (via $?)
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebInstance2 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  DefaultTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref EC2VpcId
      TargetGroupAttributes:
        -   
          Key: deregistration_delay.timeout_seconds
          Value: 30        
      Targets:
        - Id: !Ref WebInstance1
          Port: 80
        - Id: !Ref WebInstance2
          Port: 80
            
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 80
      Protocol: HTTP
