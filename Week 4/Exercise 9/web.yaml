AWSTemplateFormatVersion: '2010-09-09'
Description: Building on AWS Web Server Stack.
Parameters:
  SourceBucket:
    Type: String
  EC2VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
  WebServerInstanceProfile:
    Type: String
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  LoadBalancerArn:
    Type: String
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Resources:
  WebInstance1: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces: 
        -   
          DeviceIndex: 0
          GroupSet: 
            - Ref: WebSecurityGroup
          SubnetId: 
            Ref: PrivateSubnet1
      Tags:
        -
          Key: Name
          Value: WebServer1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          bucket=${SourceBucket}
          
          yum -y update
          
          # install python3.6 and dev tools
          yum -y install python36
          yum -y install python36-devel
          
          # install nginx
          yum -y install nginx
          
          # install the uwsgi server
          yum -y install gcc
          pip-3.6 install uwsgi
          
          # download and setup our application
          mkdir /photos
          cd /photos
          aws s3 cp s3://$bucket/deploy-app.zip .
          unzip deploy-app.zip
          pip-3.6 install -r FlaskApp/requirements.txt
          
          python3 Deploy/database_create_tables.py
          
          # copy in the nginx config
          mv -f Deploy/nginx.conf /etc/nginx/nginx.conf
          # configure upstart to run uwsgi
          mv -f Deploy/uwsgi.conf /etc/init/uwsgi.conf
          start uwsgi
          
          # switch on nginx and configure to autostart
          chkconfig nginx on
          service nginx start
        

  WebInstance2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces: 
        - 
          DeviceIndex: 0
          GroupSet: 
            - Ref: WebSecurityGroup
          SubnetId: 
            Ref: PrivateSubnet2
      Tags:
        -
          Key: Name
          Value: WebServer2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          bucket=${SourceBucket}
          
          yum -y update
          
          # install python3.6 and dev tools
          yum -y install python36
          yum -y install python36-devel
          
          # install nginx
          yum -y install nginx
          
          # install the uwsgi server
          yum -y install gcc
          pip-3.6 install uwsgi
          
          # download and setup our application
          mkdir /photos
          cd /photos
          aws s3 cp s3://$bucket/deploy-app.zip .
          unzip deploy-app.zip
          pip-3.6 install -r FlaskApp/requirements.txt
          
          python3 Deploy/database_create_tables.py
          
          # copy in the nginx config
          mv -f Deploy/nginx.conf /etc/nginx/nginx.conf
          # configure upstart to run uwsgi
          mv -f Deploy/uwsgi.conf /etc/init/uwsgi.conf
          start uwsgi
          
          # switch on nginx and configure to autostart
          chkconfig nginx on
          service nginx start

  DefaultTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref EC2VpcId
      TargetGroupAttributes:
        -   
          Key: deregistration_delay.timeout_seconds
          Value: 30        
      Targets:
        - Id: !Ref WebInstance1
          Port: 80
        - Id: !Ref WebInstance2
          Port: 80
            
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 80
      Protocol: HTTP
