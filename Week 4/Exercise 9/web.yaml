AWSTemplateFormatVersion: '2010-09-09'
Description: Building on AWS Web Server Stack
Parameters:
  SourceBucket:
    Type: String
  EC2VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
  WebServerInstanceProfile:
    Type: String
  WebServerRole:
    Type: String
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  LoadBalancerArn:
    Type: String
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
Resources:
  CloudFormationLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  WebInstance1: 
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication: 
        rolebased: 
          type: "S3"
          buckets: 
            - !Ref SourceBucket
          roleName: !Ref WebServerRole
      AWS::CloudFormation::Init:
        configSets:
          InstallAndDeploy:
            - Install
            - InstallLogs
            - Deploy
        Install:      
          packages:
            yum:
              python36: []
              python36-devel: []
              nginx: []
              gcc: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebInstance1.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance1 --configsets InstallAndDeploy --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root                

          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            01_unblock_nginx:
              command: chkconfig nginx on
        InstallLogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state
                [yum]
                file = /var/log/yum.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} yum.log
                [messages]
                file = /var/log/messages
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} messages.log
                [cfn-hup]
                file = /var/log/cfn-hup.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cfn-hup.log
                [cfn-init]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cfn-init.log
                [cfn-init-cmd]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cfn-init-cmd.log
                [cloud-init]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cloud-init.log
                [cloud-init-output]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cloud-init.log
                [handler]
                file = /var/log/handler.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} handler.log
                
                [uwsgi]
                file = /var/log/uwsgi.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} uwsgi.log     
                [nginx_access]
                file = /var/log/nginx/access.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} nginx_access.log   
                [nginx_error]
                file = /var/log/nginx/error.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} nginx_error.log          
              group: "root"
              owner: "root"
              mode: "000400"
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/awslogs/awslogs.conf
        Deploy:
          sources: 
              /photos: !Sub "https://s3.amazonaws.com/${SourceBucket}/deploy-app.zip"
          commands:
            01_pip_uwsgi:
              command: pip-3.6 install uwsgi
              cwd: "/photos"
              ignoreErrors: "false"
            02_pip_flask_app_requirements:
              command: pip-3.6 install -r requirements.txt
              cwd: "/photos/FlaskApp"
              ignoreErrors: "false" 
            03_stop_uwsgi:
              command: stop uwsgi
              ignoreErrors: "true" 
            04_stop_nginx:
              command: service nginx stop         
            05_copy_config:
              command: mv -f nginx.conf /etc/nginx/nginx.conf && mv -f uwsgi.conf /etc/init/uwsgi.conf
              cwd: "/photos/Deploy"
              ignoreErrors: "false"               
            06_create_database:
              command: python3 database_create_tables.py
              cwd: "/photos/Deploy"
              ignoreErrors: "false"          
            07_start_uwsgi:
              command: start uwsgi
            08_restart_nginx:
              command: service nginx start
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces: 
        -   
          DeviceIndex: 0
          GroupSet: 
            - Ref: WebSecurityGroup
          SubnetId: 
            Ref: PrivateSubnet1
      Tags:
        -
          Key: Name
          Value: WebServer1
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance1 --configsets InstallAndDeploy --region ${AWS::Region}
          # Signal the status from cfn-init (via $?)
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebInstance1 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M        

  WebInstance2: 
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication: 
        rolebased: 
          type: "S3"
          buckets: 
            - !Ref SourceBucket
          roleName: !Ref WebServerRole
      AWS::CloudFormation::Init:
        configSets:
          InstallAndDeploy:
            - Install
            - InstallLogs
            - Deploy
        Install:      
          packages:
            yum:
              python36: []
              python36-devel: []
              nginx: []
              gcc: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebInstance2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance2 --configsets InstallAndDeploy --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root                

          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            01_unblock_nginx:
              command: chkconfig nginx on
        InstallLogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state
                [yum]
                file = /var/log/yum.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} yum.log
                [messages]
                file = /var/log/messages
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} messages.log
                [cfn-hup]
                file = /var/log/cfn-hup.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cfn-hup.log
                [cfn-init]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cfn-init.log
                [cfn-init-cmd]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cfn-init-cmd.log
                [cloud-init]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cloud-init.log
                [cloud-init-output]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} cloud-init.log
                [handler]
                file = /var/log/handler.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} handler.log
                
                [uwsgi]
                file = /var/log/uwsgi.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} uwsgi.log     
                [nginx_access]
                file = /var/log/nginx/access.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} nginx_access.log   
                [nginx_error]
                file = /var/log/nginx/error.log
                log_group_name = ${CloudFormationLogs}
                log_stream_name = {hostname} - {instance_id} nginx_error.log                  
              group: "root"
              owner: "root"
              mode: "000400"
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/awslogs/awslogs.conf
        Deploy:
          sources: 
              /photos: !Sub "https://s3.amazonaws.com/${SourceBucket}/deploy-app.zip"
          commands:
            01_pip_uwsgi:
              command: pip-3.6 install uwsgi
              cwd: "/photos"
              ignoreErrors: "false"
            02_pip_flask_app_requirements:
              command: pip-3.6 install -r requirements.txt
              cwd: "/photos/FlaskApp"
              ignoreErrors: "false" 
            03_stop_uwsgi:
              command: stop uwsgi
              ignoreErrors: "true" 
            04_stop_nginx:
              command: service nginx stop         
            05_copy_config:
              command: mv -f nginx.conf /etc/nginx/nginx.conf && mv -f uwsgi.conf /etc/init/uwsgi.conf
              cwd: "/photos/Deploy"
              ignoreErrors: "false"               
            06_create_database:
              command: python3 database_create_tables.py
              cwd: "/photos/Deploy"
              ignoreErrors: "false"          
            07_start_uwsgi:
              command: start uwsgi
            08_restart_nginx:
              command: service nginx start
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces: 
        -   
          DeviceIndex: 0
          GroupSet: 
            - Ref: WebSecurityGroup
          SubnetId: 
            Ref: PrivateSubnet2
      Tags:
        -
          Key: Name
          Value: WebServer2
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance2 --configsets InstallAndDeploy --region ${AWS::Region}
          # Signal the status from cfn-init (via $?)
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebInstance2 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  DefaultTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref EC2VpcId
      TargetGroupAttributes:
        -   
          Key: deregistration_delay.timeout_seconds
          Value: 30        
      Targets:
        - Id: !Ref WebInstance1
          Port: 80
        - Id: !Ref WebInstance2
          Port: 80
            
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 80
      Protocol: HTTP
