AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
    License: Apache-2.0
Description: Build on AWS Project Web Tier Stack.
Parameters:
    SourceBucket:
        Type: String        
    EC2VpcId:
        Type: String
    PublicSubnet1:
        Type: String    
    PublicSubnet2:
        Type: String    
    PrivateSubnet1:
        Type: String    
    PrivateSubnet2:
        Type: String
    WebServerInstanceProfile:
        Type: String
    WebSecurityGroup:
        Type: String
    LatestAmiId:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
    WebInstance1: 
        Type: AWS::EC2::Instance
        Properties: 
            ImageId: !Ref LatestAmiId
            InstanceType: t2.micro
            IamInstanceProfile: !Ref WebServerInstanceProfile
            NetworkInterfaces: 
                -   AssociatePublicIpAddress: true
                    DeviceIndex: 0
                    GroupSet: 
                        - Ref: WebSecurityGroup
                    SubnetId: 
                        Ref: PrivateSubnet1
            Tags:
            -
              Key: Name
              Value: WebServer1
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -ex
                    bucket=${SourceBucket}
                    
                    yum -y update
                    
                    # install python3.6 and dev tools
                    amazon-linux-extras install python3 -y
                    yum -y install python3-devel
                    
                    # install nginx
                    amazon-linux-extras install nginx1.12 -y
                    
                    # install the uwsgi server
                    yum -y install gcc
                    pip3 install uwsgi
                    
                    # download and setup our application
                    mkdir /photos
                    cd /photos
                    aws s3 cp s3://$bucket/deploy-app.zip .
                    unzip deploy-app.zip
                    pip3 install -r FlaskApp/requirements.txt
                    
                    python3 Deploy/database_create_tables.py
                    
                    # copy in the nginx config
                    mv -f Deploy/nginx.conf /etc/nginx/nginx.conf
                    # configure upstart to run uwsgi
                    mv -f Deploy/uwsgi.conf /etc/init.d/uwsgi.conf
                    exec /usr/local/bin/uwsgi --ini /photos/Deploy/app.ini
                    
                    # switch on nginx and configure to autostart
                    chkconfig nginx on
                    service nginx start


    WebInstance2: 
        Type: AWS::EC2::Instance
        Properties: 
            ImageId: !Ref LatestAmiId
            InstanceType: t2.micro
            IamInstanceProfile: !Ref WebServerInstanceProfile
            NetworkInterfaces: 
                -   AssociatePublicIpAddress: true
                    DeviceIndex: 0
                    GroupSet: 
                        - Ref: WebSecurityGroup
                    SubnetId: 
                        Ref: PrivateSubnet2
            Tags:
            -
              Key: Name
              Value: WebServer2
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -ex
                    bucket=${SourceBucket}
                    
                    yum -y update
                    
                    # install python3.6 and dev tools
                    amazon-linux-extras install python3 -y
                    yum -y install python3-devel
                    
                    # install nginx
                    amazon-linux-extras install nginx1.12 -y
                    
                    # install the uwsgi server
                    yum -y install gcc
                    pip3 install uwsgi

                    # download and setup our application
                    mkdir /photos
                    cd /photos
                    aws s3 cp s3://$bucket/deploy-app.zip .
                    unzip deploy-app.zip
                    pip3 install -r FlaskApp/requirements.txt
                    
                    python3 Deploy/database_create_tables.py
                    
                    # copy in the nginx config
                    mv -f Deploy/nginx.conf /etc/nginx/nginx.conf
                    # configure upstart to run uwsgi
                    mv -f Deploy/uwsgi.conf /etc/init.d/uwsgi.conf
                    exec /usr/local/bin/uwsgi --ini /photos/Deploy/app.ini
                    
                    # switch on nginx and configure to autostart
                    chkconfig nginx on
                    service nginx start


    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Ref: PublicSubnet1
                - Ref: PublicSubnet2
            LoadBalancerAttributes:
                -   
                    Key: idle_timeout.timeout_seconds
                    Value: '50'
            SecurityGroups:
                - Ref: WebSecurityGroup

    DefaultTargetGroup: 
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckIntervalSeconds: 15
            HealthCheckPath: '/'
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 10
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 2
            Matcher:
                HttpCode: '200-299'
            Port: 80
            Protocol: HTTP
            VpcId: !Ref EC2VpcId
            TargetGroupAttributes:
                -   
                    Key: deregistration_delay.timeout_seconds
                    Value: 30                
            Targets:
            - Id:
                Ref: WebInstance1
              Port: 80
            - Id:
                Ref: WebInstance2
              Port: 80
    HttpListener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref DefaultTargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP
